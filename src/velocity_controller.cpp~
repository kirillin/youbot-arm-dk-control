#include <velocity_controller.h>


VelocityController::VelocityController(Kinematics _ks, double _kp, double _kd, double _ki) :
        ks(_ks), kp(_kp), kd(_kd), ki(_ki) {
    ROS_INFO("Velocity controller initialisation.");
    arm_position_pub = nh.advertise<brics_actuator::JointPositions>("arm_controller/position_command",
                                                                    1); /*arm_1/arm_controller/position_command*/
    arm_velocity_pub = nh.advertise<brics_actuator::JointVelocities>("arm_controller/velocity_command", 1);
    //gripper_pub = nh.advertise<brics_actuator::JointPositions>("arm_1/gripper_controller/position_command", 1);
    arm_js_sub = nh.subscribe("joint_states", 10, &VelocityController::js_callback, this);
    joy_sub = nh.subscribe("joy", 10, &VelocityController::joy_callback, this);

    out.open("error_jacobi.txt");

    /* init vectors s_d and ds_d */
    ds_d << 0.0, 0.0, 0.0, 0, 0, 0;

    s_d <<  0.27, 0.36, 0.35, -1.24, -1.44, -0.97;
    q_state << 0, 0, 0, 0, 0;

    /* coefs for controller */
    K << 1, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 0, 0,
        0, 0, 1, 0, 0, 0,
        0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 1;
}

VelocityController::~VelocityController() {
    out.close();
    arm_position_pub.shutdown();
    arm_velocity_pub.shutdown();
    arm_js_sub.shutdown();
    joy_sub.shutdown();
}

/*!
 *  Simple velocity controller.
 *
 *  `q` is measurements positions of joints (from `sensor_msgs::JointState& msg`).
 *  `dq = J^{+}(q) * (K e + ds_d)`
 *  `e = s_d - s`
 *  `s = FK(q)`
  */
void VelocityController::js_callback(const sensor_msgs::JointState &msg) {

    brics_actuator::JointVelocities arm_velocities;
    vector<brics_actuator::JointValue> point;

    /* feedback measurements'q' */
    Matrix<double, 1, NUMBER_OF_JOINTS> q;
    for (int i = 0; i < NUMBER_OF_JOINTS; i++) {
        q(i) = msg.position[i];
    }
    q_state = q;
//    Vector6d s = ks.forward(q);
//    Vector6d error = 0.2 * K * (s_d - s);

    Matrix<double, 6, N> J;
    ks.get_jacobn(q, J);

    Matrix<double, N, 6> pinvJ;

    ks.pinv(J, pinvJ);

//    VectorNd dq = iJ * ds_d;

    VectorNd dq = pinvJ * ds_d;

    if (dq.sum() < 5) {
        std::stringstream joint_name;
        point.resize(NUMBER_OF_JOINTS);
        for (int i = 0; i < NUMBER_OF_JOINTS /*+2*/; i++) {
            if (i < 5) { /* link's joints */
                joint_name.str("");
                joint_name << "arm_joint_" << (i + 1);

                point[i].joint_uri = joint_name.str();
                point[i].value = dq(i);
                point[i].unit = boost::units::to_string(boost::units::si::radian_per_second);
            } else {  /* gripper joints */
                if (i == 5) {
                    point[i].joint_uri = "gripper_finger_joint_l";
                } else {
                    point[i].joint_uri = "gripper_finger_joint_r";
                }
                point[i].value = 0;
                point[i].unit = boost::units::to_string(boost::units::si::meter_per_second);
            }
        };
        arm_velocities.velocities = point;
        arm_velocity_pub.publish(arm_velocities);
    } else {
        clog << "STOP! Jacobian is close to singularity! Velocities sre very big!" << endl;
    }
}


void VelocityController::joy_callback(const sensor_msgs::Joy &msg) {
    double deny = msg.buttons[0];
    if (deny) {
        std::cout << ds_d.transpose() << endl;

        double x = msg.axes[1];
        double z = msg.axes[3];
        double k = 0.005;

        Vector6d s = ks.forward(q_state);
        double R = sqrt(s(1) * s(1) + s(2) * s(2) + s(3) * s(3));
        std::cout << R << endl;
        if (true) {
            ds_d(0) = k * x;    //up-down
            ds_d(2) = k * z;    //fwd-bkd
        } else {
            ds_d(0) = 0;    //up-down
            ds_d(3) = 0;    //fwd-bkd
        }
    } else {
        ds_d(0) = 0;
        ds_d(1) = 0;
        ds_d(2) = 0;
        ds_d(3) = 0;
        ds_d(4) = 0;
        ds_d(5) = 0;
    }
}


void VelocityController::work() {
    ros::Rate R(200);
    while (nh.ok()) {
        ros::spinOnce();
        R.sleep();
    }
}

int main(int argc, char **argv) {
    ros::init(argc, argv, "velocity_controller_node");

    double kp = std::atof(argv[1]);
    double kd = std::atof(argv[2]);
    double ki = std::atof(argv[3]);

    std::cout << kp << "\t" << kd << "\t" << ki << std::endl;

    VectorNd v1;
    v1 << 0.033, 0.155, 0.135, 0.0, 0.0;
    VectorNd v2;
    v2 << M_PI / 2.0, 0.0, 0.0, M_PI / 2.0, 0.0;
    VectorNd v3;
    v3 << 0.147, 0.0, 0.0, 0.0, 0.218;
    VectorNd v4;
    v4 << M_PI * 169.0 / 180.0, M_PI * 65.0 / 180.0 + M_PI / 2, -M_PI * 146.0 / 180.0, M_PI * 102.5 / 180.0 + M_PI / 2,
            M_PI * 167.5 / 180.0;
    Kinematics ks(v1, v2, v3, v4);

    VelocityController vc(ks, kp, kd, ki);
    vc.work();

    return 0;
}

